---

# - name: define hosts
#   hosts: localhost
#   gather_facts: no
#   roles:
#     - define_inventory

- name: configure timezone
  hosts: emqx:loadgen
  become: yes
  become_user: root
  tags: [timezone]
  roles:
    - set_timezone

- name: config emqx
  hosts: emqx
  become: yes
  become_user: root
  tasks:
    - name: apply tuning to emqx | set kernel parameters
      script: ./files/tuning-emqx.sh
    - name: set db backend configs
      block:
        - name: set facts
          set_fact:
            emqx_db_role: "{{ 'core' if inventory_hostname in cores else 'replicant' }}"
        # - debug:
        #     var: "{{ item }}"
        #   loop:
        #     - cores
        #     - replicants
        - name: ensure etc directory
          file:
            path: /etc/emqx
            state: directory
        - name: include ad-hoc overrides
          lineinfile:
            path: "/etc/emqx/emqx.conf"
            insertafter: EOF
            regex: 'include "ad-hoc-overrides\.conf"'
            line: 'include "ad-hoc-overrides.conf"'
        - name: set ad-hoc-overrides.conf
          template:
            src: ad-hoc-overrides.conf
            dest: /etc/emqx/ad-hoc-overrides.conf
          # notify:
          #   - restart emqx
          register: ad_hoc_override_update
        - name: stop emqx
          systemd:
            name: emqx
            state: stopped
          when: ad_hoc_override_update.changed
        # - name: increase zdbbl (:dist_buf_busy_limit)
        #   lineinfile:
        #     path: "/etc/emqx/vm.args"
        #     insertafter: EOF
        #     regex: '^#?\+zdbbl'
        #     line: '#+zdbbl 8192'
        # - name: drop mnesia data and the logs
        #   shell: "rm -rf {{ item }}/*"
        #   with_items:
        #     - "/var/lib/emqx/mnesia"
        #     # - "/var/log/emqx"
        #   when: ad_hoc_override_update.changed
      when: emqx_db_backend is defined and emqx_num_cores is defined
      vars:
        cores: "{{ groups['emqx'][0:(emqx_num_cores | int)] }}"
        replicants: "{{ groups['emqx'][(emqx_num_cores | int):] }}"
    - name: beam overlays
      block:
        - name: overlay stat path
          stat:
            path: "{{ item.dest }}"
          register: overlay_dests
          loop: "{{ overlays }}"
        # - debug:
        #     var: overlay_dests
        - name: assert overlay path exists
          fail:
            msg: "one or more destinations are absent: {{ overlay_dests.results }}"
          when: "{{ overlay_dests.results
                    | map(attribute='stat')
                    | map(attribute='exists')
                    | reject('true')
                    | length != 0 }}"
        - name: copy overlay file
          copy:
            dest: "{{ item.dest }}"
            src: "{{ item.src }}"
            backup: yes
          loop: "{{ overlays }}"
          # notify:
          #   - restart emqx
      when: emqx_beam_overlays
      vars:
        overlays:
          - dest: "/usr/lib/emqx/lib/mnesia-4.20.1/ebin/mnesia_log.beam"
          # - dest: "/usr/lib/emqx/lib/mnesia-4.18.1/ebin/mnesia_log.beam"
            src: "mnesia_log.4.19.beam"
    - name: increase LimitNOFILE in emqx.service
      lineinfile:
        path: "/lib/systemd/system/emqx.service"
        regexp: "^LimitNOFILE"
        line: "LimitNOFILE=1000000000"
      # notify:
      #   - restart emqx
    # - name: install python and pip
    #   package:
    #     name:
    #       - python3
    #       - python3-pip
    #     state: present
    # - name: install python psutil
    #   pip:
    #     name: psutil
    #     state: present
    # - name: disable docker and conntrack
    #   systemd:
    #     name: docker.service
    #     state: stopped
    #     enabled: false
    #     force: true
    #   register: docker_systemd1
    # - name: disable docker and conntrack (socket)
    #   systemd:
    #     name: docker.socket
    #     state: stopped
    #     enabled: false
    #     force: true
    #   register: docker_systemd2
    # - debug:
    #     var: docker_systemd1
    # - debug:
    #     var: docker_systemd2
    # - name: rm conntrack modules
    #   modprobe:
    #     name: "{{ item }}"
    #     state: absent
    #   loop:
    #     - xt_conntrack
    #     - nf_conntrack_netlink
    #     # - nfnetlink
    #     - nf_conntrack
    #     # - nf_defrag_ipv6
    #     # - nf_defrag_ipv4
    #     # - libcrc32c
    #     # - x_tables
    # - name: reboot machine
    #   when: docker_systemd.changed
    #   reboot:
    #     reboot_timeout: 180
  handlers:
    - name: restart emqx
      systemd:
        name: emqx
        # state: restarted
        state: reloaded
        daemon_reload: yes

# - name: apply tuning to loadgen
#   hosts: loadgen
#   become: yes
#   become_user: root
#   tasks:
#     - name: set kernel parameters
#       script: ./files/tuning-loadgen.sh

- import_playbook: full-restart.yaml

...
