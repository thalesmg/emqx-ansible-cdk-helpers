{% if emqx_db_backend == "rlog" %}
{% if emqx_db_role == "core" %}
node {
  db_backend = "rlog"
  db_role = "core"
  tlog_push_mode = "{{ db_tlog_push_mode | default('async') }}"
  rpc_module = "{{ db_rpc_module | default('gen_rpc') }}"
}
{% elif emqx_db_role == "replicant" %}
node {
  db_backend = "rlog"
  db_role = "replicant"
  # core_nodes = "{{ ['emqx@'] | product(cores) | map('join') | join(',') }}"
  tlog_push_mode = "{{ db_tlog_push_mode | default('async') }}"
  rpc_module = "{{ db_rpc_module | default('gen_rpc') }}"
}
{% endif %}
{% elif emqx_db_backend == "mnesia" %}
node {
  db_backend = "mnesia"
  # to avoid problems in replicants when changing configs...
  db_role = "core"
  tlog_push_mode = "{{ db_tlog_push_mode | default('async') }}"
  rpc_module = "{{ db_rpc_module | default('gen_rpc') }}"
}
{% endif %}

rpc.tcp_client_num = {{ emqx_rpc_tcp_client_num | default(1) | int }}

sysmon.top {
  db_hostname = ""
  max_procs = 5
}

# mqtt {
#   idle_timeout = 5s
# }

log {
  file_handlers.default {
    level = {{ emqx_log_level | default("warning") }}
  }
}

node {
  max_ports = 134217727
  process_limit = 134217727
}

prometheus {
  enable = {{ emqx_prometheus_enabled | default("true") }}
}

# overload_protection {
#  ## React on system overload or not
#  ## @doc overload_protection.enable
#  ## ValueType: Boolean
#  ## Default: false
#  enable = true

#  ## Backoff delay in ms
#  ## @doc overload_protection.backoff_delay
#  ## ValueType: Integer
#  ## Range: (0, infinity)
#  ## Default: 1
#  backoff_delay = 5

#  ## Backoff GC enabled
#  ## @doc overload_protection.backoff_gc
#  ## ValueType: Boolean
#  ## Default: false
#  backoff_gc = false

#  ## Backoff hibernation enabled
#  ## @doc overload_protection.backoff_hibernation
#  ## ValueType: Boolean
#  ## Default: true
#  backoff_hibernation = true

#  ## Backoff hibernation enabled
#  ## @doc overload_protection.backoff_hibernation
#  ## ValueType: Boolean
#  ## Default: true
#  backoff_new_conn = true
# }
